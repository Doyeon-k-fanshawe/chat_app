// imports will always go at the top
import ChatMsg from './components/ChatMessage.js';

const socket = io();

//utility function for socekt
function setUserID({ sID }) {
  // debugger;

  // save our unique ID generated by Socket on the server side 
  // - this is how we track individual connections to the chat service
  vm.socketID = sID;

  let showtext = document.querySelector(".conStatus");

  setTimeout(function(){
    showtext.classList.add("show");
  }, 5000);

    showtext.classList.remove("show");
    vm.connectstatus = "Connected!"
}

function showNewMessage({ message }) {
  vm.messages.push(message);
}

function handleUserTyping(user) {
  console.log(user);
  console.log('Somebody is typing something');
  vm.typing = " is typing something now"
  vm.status = "online";
}

function showDisConnectStatus(discon) {
  console.log(discon);
  console.log('Someone is disconnected now.');
  vm.disconnect = " is Disconnected";

  let hiddentext = document.querySelector(".discon__status");

  hiddentext.classList.add("hiddenbox");

  setTimeout(function(){
    hiddentext.classList.remove("hiddenbox");
  }, 5000);
}

const { createApp } = Vue

  const vm = createApp({
    data() {
      return {
        socketID: '',
        message: '',
        messages: [],
        nickname: '',
        activePic: '/images/fox.png',
        pictures: [
          '/images/fox.png',
          '/images/rac.png',
          '/images/owl.png',
          '/images/hed.png',
        ],
        indexOfActive: 0,
        status: '',
        typing: '',
        connectstatus: '',
        disconnect: '',
      }
    },

    methods: {
      dispatchMessage() {
        // debugger;
        socket.emit('chat_message', {
          content: this.message,
          name: this.nickname || 'anonymous',
          id: this.socketID,
        })

        this.message = "";
      },

      catchTextFocus() {
        // emit a custome typing event and broadcast it to the server
        socket.emit('user_typing', {
          name: this.nickname || 'anonymous'
        })
      },

      changeActivePic(index) {
        this.activePic = this.pictures[index];
        this.indexOfActive = index;
      }
    },

    components: {
      newmsg: ChatMsg
    }
  }).mount('#app')

  socket.addEventListener('connected', setUserID);
  socket.addEventListener('new_message', showNewMessage);
  socket.addEventListener('typing', handleUserTyping);
  socket.addEventListener('disconnected', showDisConnectStatus);